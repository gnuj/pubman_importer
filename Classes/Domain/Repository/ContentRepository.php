<?php
namespace LeipzigUniversityLibrary\PubmanImporter\Domain\Repository;

use \TYPO3\CMS\Core\Utility\GeneralUtility;

/***************************************************************
 *
 *  Copyright notice
 *
 *  (c) 2014
 *
 *  All rights reserved
 *
 *  This script is part of the TYPO3 project. The TYPO3 project is
 *  free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  The GNU General Public License can be found at
 *  http://www.gnu.org/copyleft/gpl.html.
 *
 *  This script is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  This copyright notice MUST APPEAR in all copies of the script!
 ***************************************************************/

/**
 * The repository for Organizations
 */
class ContentRepository extends \LeipzigUniversityLibrary\PubmanImporter\Library\PMIRepository
{
    protected $baseUri;

    public function __construct()
    {
        $this->_httpRequest = GeneralUtility::makeInstance('\TYPO3\CMS\Core\Http\HttpRequest');
    }

    public function setBaseUri($value) {
        $this->baseUri = $value;
    }

    public function getBaseUri() {
        return $this->baseUri;
    }

    /**
     * Finds an object matching the given identifier.
     *
     * @param integer $uid The identifier of the object to find
     * @return object The matching object if found, otherwise NULL
     * @api
     */
    public function findByComponent($component)
    {
        if ($component->getMimetype() === 'application/xml') {
            $this->_url = 'https://docker.ub.intern.uni-leipzig.de';
            $this->_path = '/tei-converter/html/to.xsl';
            $this->setOptions([
                'querySettings' => ['uri' => $component->getHref()]
            ]);

            return $this->execute()->parse();
        }

        if ($component->getMimeType() === 'application/pdf') {
            $this->_path = $component->getPath();

            return $this->execute()->getBody();
        }
    }

    public function parse() {
        $this->_domDocument = \DOMDocument::loadHTML($this->_body);
        $this->_xpath = new \DOMXPath($this->_domDocument);

        $this->manipulateHref();
/* remove tei transformed content?
        $this->removeNode('//div[@class="stdheader autogenerated"]');
        $this->removeNode('//span[@class="docTitle"]');
        $this->removeNode('//span[@class="docAuthor"]');
*/
        $this->removeNode('//div[@class="stdfooter autogenerated"]/div[@class="footer"]');

        return $this->getBodyContent();

    }

    protected function manipulateHref() {
        foreach ($this->_xpath->query('//*[@href]') as $node) {
            $href = $node->getAttribute('href');
            if (substr($href, 0, 1) !== '#') continue;

            $node->setAttribute('href', $this->getBaseUri() . $href);
        }

        return $this;
    }

    protected function removeNode($xpath) {
        $node = $this->_xpath->query($xpath)->item(0);
        $node && $node->parentNode->removeChild($node);
        return $this;
    }

    protected function getBodyContent() {
        $value = '';

        foreach ($this->_xpath->query('/html/body')->item(0)->childNodes as $node) {
            $value .= $this->_domDocument->saveXML($node);
        }

        return $value;
    }
}